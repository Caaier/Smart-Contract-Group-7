//SPDX-License-Identifier: MIT

// Warning: Do not use for actual funds.

pragma solidity ^0.8.9;

contract Blackjack {
    address public dealer;
    uint256 public minBet = 0.01 ether;
    uint256 public maxBet = 100 ether;
    
    address public player;

    // Storing players bet
    struct Player {
        uint amountofbet;
    }
    
    // simple mapping in storage
    mapping(address => uint256) public betofplayer;

    }



    // Pre game
    // sending ether from address to smart contract
    // function bet() external payable {
        if(msg.value < 1000){
            revert();
        }
    }
    // check the bet of player
    // function check_bet() external view returns(uint) {
    //   return address(this).balance;
    }

    // Store the bet

    // Post game
    // trasnfer 1 ether from smart contract to player
    // function payout(address payable recipient) external {
    //    recipient.transfer(1 ether)
    }

//Pre game
    // launch contract
    // eth deposit einzahlen können
    // state variables --> timesstamp, betamount, adressen
    // comments zu den variablen
    // anzahl spieler
    // andere verträge anschauen
    // max bet --> fix bet? minimum bet
    // eth reingeben --> doppelt so viel eth zurückgeben wie?
    // amount den du reintust
    // bets insgesamt limitieren

// Post game
// Gewinnverteilung --> Gewinner gewinnt das geld (Gewinnbeteilung nur mit Token)
// Gewinnbeteiligung --> wenn dealer gewinnt
// Spiel zu ende --> gameend
// Wiederholung zu Start
